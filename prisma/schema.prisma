// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output        = "../src/models"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model admin {
  id            Int       @id @default(autoincrement())
  fullname      String    
  email         String    @unique 
  role          Role      @default(super_admin)
  profile_image String?   
  password      String    
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model project_manager {
  id            Int       @id @default(autoincrement())
  fullname      String    
  username      String    @unique 
  email         String    @unique 
  phone_number  String    @unique 
  role          Role      @default(project_manager)
  profile_image String? 
  verification_code String? 
  email_verified  Boolean              @default(false)  
  status        Status    @default(Inactive)
  password      String   
  temporal_password  Boolean              @default(true) 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime @updatedAt
  project project[]
}

model project {
  id Int @id @default(autoincrement())
  project_name String
  project_manager                     project_manager       @relation(fields: [project_manager_id], references: [id], onDelete: Cascade)
  project_manager_id                  Int
  start_date DateTime
  end_date DateTime
  description          String            @db.Text
  target_entry Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime @updatedAt
  data_entry data_entry[]
}

model data_entry {
  id Int @id @default(autoincrement())
  project                     project       @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id                  Int
  date DateTime
  location String
  description          String            @db.Text
  image_url String?
  video_url String?
  document_url String?
  metadata     Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  project_manager
  super_admin
}

enum Status {
  Available
  Pending
  Completed
  Rejected
  Approved
  Inactive
  Active
  Suspend
}
